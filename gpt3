#!/bin/bash
set -ef -o pipefail
# Inherit defaults from env variables for easy scripting

# Available engines (models) are listed here: https://platform.openai.com/docs/models
# Apparently text-davinci-003 costs a lot more, and is less accurate, but I found it much faster than gpt-3.5-turbo!
[ -z "$ENGINE" ] && ENGINE="text-davinci-003"
#[ -z "$ENGINE" ] && ENGINE="gpt-3.5-turbo"

[ -z "$ENGINE" ] && ENGINE=davinci
[ -z "$TEMPERATURE"  ] && TEMPERATURE=0.5
[ -z "$FREQ_PENALTY" ] && FREQ_PENALTY=0
[ -z "$PRES_PENALTY" ] && PRES_PENALTY=0

POSITIONAL=()
while [[ $# -gt 0 ]]; do
key="$1"
case $key in
    -e|--engine)
    ENGINE="$2"
    shift # past argument
    shift # past value
    ;;
    -t|--temperature)
    TEMPERATURE="$2"
    shift # past argument
    shift # past value
    ;;
    -f|--freq-penalty)
    FREQ_PENALTY="$2"
    shift # past argument
    shift # past value
    ;;
    -p|--pres-penalty)
    PRES_PENALTY="$2"
    shift # past argument
    shift # past value
    ;;
    *)    # unknown option
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameter
[ -z "$2" ] && MAX_TOKENS=64 || MAX_TOKENS="$2"
[ -z "$OPENAI_KEY" ] && KEY="$OPENAI_API_KEY" || KEY="$OPENAI_KEY"

PROMPT="$1"

if [ -z "$KEY" ]; then
  echo "You must set OPENAI_API_KEY or OPENAI_KEY"
  exit 1
fi

line_buffered="-l"
if sed --version | grep GNU >/dev/null; then
  line_buffered="-u"
fi

# FIXME: Improve error handling

call_chat_api() {
  request_data=$(
cat << !!!
  {
    "model": "${ENGINE}",
    "messages": [{"role": "user", "content": "${PROMPT}"}],
    "temperature": ${TEMPERATURE}
  }
!!!
  )

  # Not a GET request
  curl -sSL -N \
    https://api.openai.com/v1/chat/completions \
    -H "gpt3-cli-joeytwiddle/0.2.0 (https://github.com/CrazyPython/gpt3-cli)" \
    -H "Authorization: Bearer $KEY" \
    -H "Content-Type: application/json" \
    -d "$request_data" |
  jq -j --unbuffered '.choices[0].message.content'
  # Add trailing newline
  echo

  # Example error response:
  #     {
  #         "error": {
  #             "message": "you must provide a model parameter",
  #             "type": "invalid_request_error",
  #             "param": null,
  #             "code": null
  #         }
  #     }
}

call_old_api() {
  curl -sSL -N \
    -G https://api.openai.com/v1/engines/${ENGINE}/completions/browser_stream \
    -H "gpt3-cli-joeytwiddle/0.2.0 (https://github.com/CrazyPython/gpt3-cli)" \
    -H "Authorization: Bearer $KEY" \
    --data-urlencode model="$ENGINE" \
    --data-urlencode prompt="$PROMPT" \
    --data-urlencode temperature="$TEMPERATURE" \
    --data-urlencode max_tokens="$MAX_TOKENS" \
    --data-urlencode frequency_penalty="$FREQ_PENALTY" \
    --data-urlencode presence_penalty="$PRES_PENALTY" |
    sed $line_buffered 's/^data: //' | grep --line-buffer -v '^\[DONE\]$' | jq -j --unbuffered '.choices[0].text' 
  # Add trailing newline
  echo
}

if [[ "$ENGINE" =~ "gpt-3.5-turbo" ]]; then
  call_chat_api
else
  call_old_api
fi
